In the C programming language, control statements are used to control the flow of execution of a program based on certain conditions or loops. They can be broadly classified into three categories:

1. Decision-making (Branching) Statements
2. Looping (Iteration) Statements
3. Jump Statements

1. Decision-Making (Branching) Statements
These statements allow the program to choose between different paths of execution based on conditions.

a) if Statement
Executes a block of code if a condition is true.

if (condition) {
    // code to execute if condition is true
}

b) if-else Statement
Executes one block if the condition is true, another if false.

if (condition) {
    // code if true
} else {
    // code if false
}

c) else-if Ladder
Checks multiple conditions sequentially.

if (condition1) {
    // code if condition1 is true
} else if (condition2) {
    // code if condition2 is true
} else {
    // code if all conditions are false
}

d) switch Statement
Selects one of many code blocks to execute based on a variable's value.

switch (expression) {
    case value1:
        // code if expression == value1
        break;
    case value2:
        // code if expression == value2
        break;
    default:
        // code if no case matches
}


2. Looping (Iteration) Statements
These statements allow the repeated execution of a block of code.

a) for Loop
Repeats a block for a specified number of times.

for (initialization; condition; increment/decrement) {
    // code to repeat
}

b) while Loop
Repeats a block while a condition is true.

while (condition) {
    // code to repeat
}

c) do-while Loop
Similar to while, but executes at least once before checking the condition.

do {
    // code to repeat
} 
while (condition);

3. Jump Statements
These statements alter the normal flow of execution.

a) break Statement
Exits a loop or switch statement immediately.

for (int i = 0; i < 10; i++) {
    if (i == 5) {
        break; // exits the loop when i reaches 5
    }
    printf("%d\n", i);
}

b) continue Statement
Skips the current iteration of a loop and proceeds to the next.

for (int i = 0; i < 10; i++) {
    if (i == 5) {
        continue; // skips printing 5
    }
    printf("%d\n", i);
}

c) goto Statement
Jumps to a labeled statement in the function (use sparingly, as it can make code hard to read).

goto label;
// some code
label:
    // code to execute after goto

d) return Statement
Exits a function and optionally returns a value.

int add(int a, int b) {
    return a + b; // exits function and returns sum
}